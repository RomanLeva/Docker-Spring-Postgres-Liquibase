package group.demoapp.service;import group.demoapp.aspect.exception.WalletException;import group.demoapp.repository.entity.Wallet;import group.demoapp.repository.WalletJpaRepo;import group.demoapp.service.dto.WalletChangeDto;import group.demoapp.service.dto.WalletDto;import group.demoapp.service.dto.WalletRegisterDto;import group.demoapp.service.mapper.MapperServiceToRepository;import lombok.RequiredArgsConstructor;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.jpa.repository.Modifying;import org.springframework.retry.annotation.Backoff;import org.springframework.retry.annotation.Retryable;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Isolation;import org.springframework.transaction.annotation.Transactional;@Service@RequiredArgsConstructorpublic class WalletService {    @Autowired    private final WalletJpaRepo walletRepository;    @Autowired    private final MapperServiceToRepository mapper;    public WalletDto getWalletById(Long id) {        Wallet wallet = walletRepository.findById(id).orElse(null);        if (wallet == null) {            throw new WalletException("Wallet with requested UUID was not found");        }        return mapper.mapWalletToDto(wallet);    }    @Retryable(backoff = @Backoff(delay = 100))    @Transactional(isolation = Isolation.REPEATABLE_READ)    @Modifying(flushAutomatically = true)    public synchronized void changeWallet(WalletChangeDto walletChangeDto) {        Wallet wallet = walletRepository.findById(walletChangeDto.getUuid()).orElse(null);        if (wallet == null) {            throw new WalletException("Wallet with requested UUID was not found");        }        if (walletChangeDto.getOperationType() == WalletChangeDto.OPERATION_TYPE.DEPOSIT){            wallet.setAmount(wallet.getAmount() + walletChangeDto.getAmount());        } else { // WITHDRAW            int result = wallet.getAmount() - walletChangeDto.getAmount();            if (result < 0) {                throw new WalletException("Insufficient funds");            }            wallet.setAmount(result);        }    }    public WalletDto registerWallet(WalletRegisterDto walletRegisterDto) {        Wallet wallet = mapper.mapWalletRegisterDtoToWallet(walletRegisterDto);        Wallet save = walletRepository.save(wallet);        return mapper.mapWalletToDto(save);    }}